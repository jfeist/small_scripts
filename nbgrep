#!/bin/bash

# adapted from https://gist.github.com/jbarratt/fa1d3473048e5f856aeb

# usage: nbgrep 'pattern'
# On the command line we get the argument to search for
PATTERN=$1

# creates a null-separated list of all ipython notebooks in the current directory tree
function finder {
    if hash mdfind 2> /dev/null; then
        # mdfind uses macOS's spotlight search, so it's almost instant
        mdfind -onlyin . 'kMDItemFSName == *.ipynb' -0 | sort -z
    else
        # Use find with $PWD to get absolute path output (like mdfind)
        find "$PWD" -name '*.ipynb' -print0
    fi
}

# jq script to filter out the best guess for the language, and the source in code cells
read -r -d '' NBFLATSOURCE <<EOF
(.metadata | (.language_info | .pygments_lexer? // .name) //
             (.kernelspec | if (.language|length)>0 then .language else "python" end)),
(.worksheets[]?.cells[]? // .cells[]? | select(.cell_type=="code") |
        .source[]? // .source // .input[]? // .input | gsub("\n";"")?)
EOF

# loop over all files - empty string as separator corresponds to \0,
# since bash strings are null-terminated
finder | while IFS='' read -d '' f; do
    FLAT=$(jq -r "$NBFLATSOURCE" "$f")
    LANGUAGE="${FLAT%%$'\n'*}" # this gets the first line of the variable
    CONTENT="${FLAT#*$'\n'}"   # this gets all but the first line
    # print matching line numbers in a format that we can use for sed
    MATCHLINES=$(awk "/$PATTERN/"'{printf "%sp;", FNR}' <<< "$CONTENT")
    if [[ -n $MATCHLINES ]]; then
        # if pattern is in the output, colorize full output with pygmentize,
        # giving it the most context possible to get the colors right,
        # and then take the lines that matched
        echo -e "${f#$PWD/}:\n"
        (pygmentize -l "$LANGUAGE" 2>/dev/null || cat) <<< "$CONTENT" | sed -n $MATCHLINES
        echo -e "\n"
    fi
done
