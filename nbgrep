#!/bin/bash

# adapted from https://gist.github.com/jbarratt/fa1d3473048e5f856aeb

# usage: nbgrep 'pattern'
# On the command line we get the argument to search for
PATTERN=$1

# creates a null-separated list of all ipython notebooks in the current directory tree
function finder {
    if hash mdfind 2> /dev/null; then
        # mdfind uses OSX's spotlight search, so it's almost instant
        mdfind -onlyin . 'kMDItemFSName == *.ipynb' -0 | sort -z
    else
        # Use find from findutils, with $PWD instead of . so that we get
        # absolute path output (like mdfind)
        find "$PWD" -name '*.ipynb' -print0
    fi
}

# Use 'jq' to filter out only the source in code cells
function nbflatsource {
    jq -r '.worksheets[]?.cells[]?//.cells[]? | select(.cell_type=="code") |
           .source[]?//.source//.input[]?//.input | gsub("\n";"")?' "$@"
}

# loop over all files - empty string as separator corresponds to \0,
# since bash strings are null-terminated
finder | while IFS='' read -d '' f; do
    CONTENT=$(nbflatsource "$f")
    if grep -q "$PATTERN" <<< "$CONTENT"; then
        # if pattern is in the output, colorize full output with pygmentize,
        # giving it the most context possible to guess the language and get the colors right
        OUTPUT=$(pygmentize -g <<< "$CONTENT" | grep "$PATTERN")
        # and finally, print the matching lines
        echo -e "${f#$PWD/}\n\n$OUTPUT\n\n"
    fi
done
